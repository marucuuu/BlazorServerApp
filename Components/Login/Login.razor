@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@inject NavigationManager Navigation
@layout BlazorServerApp.Components.Layout.EmptyLayout
@inject UserService UserService
@inject IHttpContextAccessor HttpContextAccessor


<PageTitle>Login</PageTitle>



<div class="container d-flex justify-content-center align-items-center min-vh-75">
    <div class="card shadow-lg p-4" style="width: 100%; max-width: 400px;">
        <div class="card-body">

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <EditForm Model="@loginModel"
                      OnValidSubmit="HandleValidSubmit"
                      FormName="loginForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary">Login</button>
                </div>
            </EditForm>

            <div class="text-center mt-3">
                <span>Don't have an account?</span>
                <a href="/register" class="ms-1">Register</a>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromForm]
    public LoginModel loginModel { get; set; } = new();

    private string? errorMessage;

    private async Task HandleValidSubmit()
    {
        var user = await UserService.AuthenticateAsync(loginModel.Email, loginModel.Password);
        if (user != null)
        {
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, user.Email),
                };

                var identity = new ClaimsIdentity(claims, "Cookies");
                var principal = new ClaimsPrincipal(identity);

                await httpContext.SignInAsync("Cookies", principal);

                Navigation.NavigateTo("/home", forceLoad: true);
            }
            else
            {
                // This should not happen during form submission in Blazor Server.
                errorMessage = "Unexpected error: HttpContext is not available.";
            }
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }
    }


    public class LoginModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}
